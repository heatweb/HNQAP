[
    {
        "id": "617bcc542b3b538b",
        "type": "http in",
        "z": "282ebcbcb21fbccd",
        "name": "",
        "url": "/hwforms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "b88ffd7612b3e9b8"
            ]
        ]
    },
    {
        "id": "b88ffd7612b3e9b8",
        "type": "template",
        "z": "282ebcbcb21fbccd",
        "name": "MQTT",
        "field": "mqtt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js\" type=\"text/javascript\"></script>\n\n<script>\n\n\nvar urlParamsM = new URLSearchParams(window.location.search);\n\n// wss://broker.emqx.io:8084/mqtt  wss://zc62a82b.ala.us-east-1.emqxsl.com:8084/mqtt\nvar mqttServer = urlParamsM.get('server') || \"zc62a82b.ala.us-east-1.emqxsl.com\" || \"mqtt.heatweb.cloud\";\nvar mqttPort = urlParamsM.get('port') || \"8084\" || \"8081\";\nvar mqttUser = urlParamsM.get('user') || \"testo\";\nvar mqttPassword = urlParamsM.get('password') || \"t3st0\";\nvar mqttSSL = urlParamsM.get('ssl') || \"true\";\nif (mqttSSL==\"true\") { mqttSSL = true; } else { mqttSSL=false; }\n\nvar serverdes =\"\";\n\nfunction changeserver() {\n    \n    \n   // var n = parseInt(document.getElementById(\"serverserver\").value);\n    \n    // if (userdata.networks[n].server) { mqttServer = userdata.networks[n].server; }\n    // if (userdata.networks[n].port) { mqttPort = userdata.networks[n].port; }\n    // if (userdata.networks[n].user) { mqttUser = userdata.networks[n].user; }\n    // if (userdata.networks[n].password) { mqttPassword = userdata.networks[n].password; }\n    \n    connectMQTT();\n}\n\nfunction connectMQTT() {\n    \n    \n                    client = new Paho.MQTT.Client(mqttServer, Number(mqttPort), \"cl\"+a.getTime());\n                \n                    client.onConnectionLost = onConnectionLost;\n                    client.onMessageArrived = onMessageArrived;\n                    \n                    if (mqttSSL==true || mqttSSL==\"true\") { mqttSSL = true; } else { mqttSSL=false; }\n                    \n                    serverdes = mqttUser + \"@\" + mqttServer + \":\" + mqttPort;\n                    //document.getElementById(\"infodiv\").innerHTML = \" connecting to \" + serverdes;\n                    \n                    client.connect({onSuccess:onConnect, userName:mqttUser, password:mqttPassword, useSSL:mqttSSL });\n    \n    \n}\n\nvar mqttConnected = false;\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  alert(\"Connected to MQTT Server.\");\n\n  mqttConnected = true;\n  //document.getElementById(\"infodiv\").innerHTML = \"Connected\";\n  \n  message = new Paho.MQTT.Message(\"Hello World\");\n\tmessage.destinationName = \"testo/hello\";\n\tclient.send(message);\n  \n\n    if (1==2) {\n\n        var shs = urlParamsM.get('show').split(\",\");\n        for (var sssh in shs) {\n            \n          var subtop = shs[sssh];\n          var tops = shs[sssh].split(\"/\");\n          for (var t in tops) {\n              if (tops[t]==\"\") { tops[t]=\"+\"; }\n          }\n          if (tops[tops.length-1]==\"+\") { tops[tops.length-1] = \"#\"; }\n          subtop=\"\";\n          for (var t in tops) {\n              subtop += (subtop==\"\"?\"\":\"/\") + tops[t];\n          }     \n          console.log(\"Subscribing to \" + subtop) ;\n          client.subscribe(subtop); \n          \n          subscriptions += \" \" + subtop;\n       \n        }   \n    } else {\n        \n        \n      //  client.subscribe(\"+/+/+/stat/state\"); \n      //  client.subscribe(\"+/+/+/+/plot\");\n      //  client.subscribe(\"+/+/+/+/property\");\n      //  client.subscribe(\"+/+/+/settings/title\");\n    }\n  \n \n}\n\n// called when the client loses its connection\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n    }\n}\n\n\n\n// called when a message arrives\nfunction onMessageArrived(message) {\n  console.log(message.destinationName + \":\"+message.payloadString);\n  try { \n      \n      var ttt = new Date().getTime();\n      \n      var topics = message.destinationName.split(\"/\");\n      var mynet = topics[0];\n      var devid = topics[2];\n      var dkey = topics[4];\n      \n  } catch {}\n\n}\n\n</script>",
        "output": "str",
        "x": 270,
        "y": 200,
        "wires": [
            [
                "8705f5f6ba6583fb"
            ]
        ]
    },
    {
        "id": "8705f5f6ba6583fb",
        "type": "template",
        "z": "282ebcbcb21fbccd",
        "name": "PDF",
        "field": "pdf",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.10/pdfmake.min.js\" integrity=\"sha512-w61kvDEdEhJPJLSAJpuL+RWp1+zTBUUpgPaP+6pcqCk78wQkOaExjnGWrVbovojeisWGQS7XZKz+gr3L+GPYLg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.10/vfs_fonts.js\" integrity=\"sha512-nNkHPz+lD0Wf0eFGO0ZDxr+lWiFalFutgVeGkPdVgrG4eXDYUnhfEj9Zmg1QkrJFLC0tGs8ZExyU/1mjs4j93w==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<script>\n\n\nfunction runPDF() {\n\n\tconsole.log(tableArrays.calcsArray);\n\tif (myChart) { testoimage = myChart.toBase64Image(); }\n\tconsole.log(testoimage);\t\n\t\n\tvar dd = {\n\t\tcontent: [\n\t\t\t{\n\t\t\t\ttext: qdata.title + '\\n\\n',\n\t\t\t\tstyle: 'header'\n\t\t\t},\n\t\t\t{\n\t\t\t\tstyle: 'tableExample',\n\t\t\t\ttable: {\n\t\t\t\t\theaderRows: 1,\n\t\t\t\t\tbody: tableArrays.qArray\n\t\t\t\t},\n\t\t\t\tlayout: 'lightHorizontalLines'\n\t\t\t}\n\t\t\t,\n\t\t\t{\n\t\t\t\ttext: 'Calculations:\\n\\n',\n\t\t\t\tstyle: 'subheader'\n\t\t\t},\n\t\t\t{\n\t\t\t\tstyle: 'tableExample',\n\t\t\t\ttable: {\n\t\t\t\t\theaderRows: 1,\n\t\t\t\t\tbody: tableArrays.calcsArray\n\t\t\t\t},\n\t\t\t\tlayout: 'lightHorizontalLines'\n\t\t\t}\n\t\t],\n\t\tstyles: {\n\t\t\theader: {\n\t\t\t\tfontSize: 18,\n\t\t\t\tbold: true,\n\t\t\t\tmargin: [0, 0, 0, 10]\n\t\t\t},\n\t\t\tsubheader: {\n\t\t\t\tfontSize: 16,\n\t\t\t\tbold: true,\n\t\t\t\tmargin: [0, 10, 0, 5]\n\t\t\t},\n\t\t\ttableExample: {\n\t\t\t\tfontSize: 9,\n\t\t\t\tmargin: [0, 5, 0, 15]\n\t\t\t},\n\t\t\ttableHeader: {\n\t\t\t\tbold: true,\n\t\t\t\tfontSize: 12,\n\t\t\t\tcolor: 'black'\n\t\t\t}\n\t\t},\n\t\tdefaultStyle: {\n\t\t\t// alignment: 'justify'\n\t\t}\n\t\t\n\t}\n\n\t\n\tif (testoimage) { dd.content.push(\"\\n\\n\"); dd.content.push({ image: testoimage, width: 500 }); }\n\tconsole.log(dd);\n\n\tif (files) {\n\t\n\t\tfor (var myf in files) {\n\t\t\n\t\t\tif (files[myf].data)  { dd.content.push(\"\\n\\n\"); dd.content.push({ image: files[myf].data, width: 500 });}\n\t\t\n\t\t}\n\t\n\t}\n\n\t//pdftable(tableArrays.qArray, {\"widths\":[100,210,110,60],\"align\":[\"left\",\"left\",\"right\",\"left\"], \"title\":\"Inputs\", \"fontSize\":9});\n\t//pdfMake.createPdf(dd).download();\n\n\tpdfMake.createPdf(dd).open();\n\n\tconsole.log(tableArrays.qArray);\n}\n\nvar tableCount = 0;\n\nfunction pdftable(tdata,toptions) {\n    \n    tableCount++;\n\n    var pdfoot = [];\n    \n        \n    pdfoot.push({\n        text: thead,\n        style: 'subheader'\n    });\n\n    //doc.text(thead, docL, doc.y, {\"align\":\"left\", \"width\": 400, lineGap: 2});\n\n   \n    \n    for (var tr in tdata) {\n        \n        if (trow>99) {\n            \n            //doc.addPage(layoutP);\n            //standardStuff(curSec,false);\n            \n            //doc.text(thead + \" (continued)\", doc.x, 100, {\"align\":\"left\", \"width\": 400, lineGap: 2});\n            \n            \n        }\n        \n        trow++;\n        tcol=-1;\n        cellhmax = 0;\n\n        tx = 1*tx1;\n        for (var td in tdata[tr]) {\n            tcol++;\n            //var tdw = 1 * (twidths[td] || tdaw);\n            //var tdal = aligns[td] || \"left\";\n            \n            var tdval = \"\" + tdata[tr][td];\n            if (tdval.substr(0,1)==\"{\") { tdval = \"{object}\"; }  // dont display objects\n            \n            //console.log(\"tdval.. \" + tdval + \"...\" + tdw + \"...\" + tdaw  + \"...\" + twidths[td]);\n            //////////////////////////////  doc.text(tdval, tx+5, ty+5, {\"align\":tdal, \"width\": tdw-10, lineGap: 2});\n            \n            //var cellh = doc.y - (ty+5) + 3;\n            //cellhmax = Math.max(cellhmax,cellh);\n            \n            //tx = tx + tdw;\n        }\n        \n        \n        \n        \n        \n    }\n    \n}\n\n\n</script>",
        "output": "str",
        "x": 390,
        "y": 200,
        "wires": [
            [
                "9b23c3185fb9d39f"
            ]
        ]
    },
    {
        "id": "9b23c3185fb9d39f",
        "type": "template",
        "z": "282ebcbcb21fbccd",
        "name": "Graph",
        "field": "testograph",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<div>\n\t<canvas id=\"myChart\"></canvas>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/luxon@^2\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@^1\"></script>\n\n<script>\n\nvar chartExists = false;\nvar myChart;\n\nfunction drawGraph() {\n\n  // const DATA_COUNT = 4;\n  // const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\n  console.log(testoSensorData[\"115i-378\"]);\n\n  chartExists = true;\n\n  const ctx = document.getElementById('myChart');\n\n  dsets = [];\n  dcolours = ['red','blue','green','orange'];\n  var dcnt=0;\n  for (var sensor in testoSensorData) {\n  \n    if (sensor.indexOf(\"115i\")>-1) {\n\n        dsets.push({\n          label: sensor,\n          data: testoSensorData[sensor],               \n          backgroundColor: 'transparent',\n          borderColor: dcolours[dcnt],\n          borderWidth: 2,\n          pointStyle: false,\n          tension: 0.5\n        });\n\n        dcnt++;\n    }\n  }\n\n  const config = {\n  type: 'line',\n  data: {\n    datasets: dsets\n  },\n  options: {\n      parsing: {\n        xAxisKey: 'timestamp',\n        yAxisKey: 'Temperature'\n      },\n      animation: false,\n      scales: {\n        x: {\n          type: 'time',\n          time: {\n            unit: 'second'\n          },\n          title: {\n            display: true,\n            text: 'Time'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Temperature'\n          }\n        }\n      }\n    }\n  }\n\n  myChart = new Chart(ctx,config);\n\n  //console.log(image);\n\n}\n\nfunction updateGraph() {\n\n  myChart.update();\n\n}\n\n</script>",
        "output": "str",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "11c8fe6ea4a24805"
            ]
        ]
    },
    {
        "id": "11c8fe6ea4a24805",
        "type": "template",
        "z": "282ebcbcb21fbccd",
        "name": "Img Upload",
        "field": "upload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n    <div>\n        <input hidden type=\"file\" id=\"image-input\" accept=\"image/*\"> <br><br>\n        <img id=\"preview\"></img>\n    </div>\n\n    <script>\n\n        // https://imagekit.io/blog/how-to-resize-image-in-javascript/\n        var imgcnt = 0;\n\n        let imgInput = document.getElementById('image-input');\n        imgInput.addEventListener('change', function (e) {\n            if (e.target.files) {\n                let imageFile = e.target.files[0];\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    var img = document.createElement(\"img\");\n                    img.onload = function (event) {\n                        // Dynamically create a canvas element\n                        var MAX_WIDTH = 480;\n                        var MAX_HEIGHT = 480;\n\n                        var width = img.width;\n                        var height = img.height;\n\n                        // Change the resizing logic\n                        if (width > height) {\n                            if (width > MAX_WIDTH) {\n                                height = height * (MAX_WIDTH / width);\n                                width = MAX_WIDTH;\n                            }\n                        } else {\n                            if (height > MAX_HEIGHT) {\n                                width = width * (MAX_HEIGHT / height);\n                                height = MAX_HEIGHT;\n                            }\n                        }\n\n                        var canvas = document.createElement(\"canvas\");\n                        canvas.width = width;\n                        canvas.height = height;\n                        var ctx = canvas.getContext(\"2d\");\n                        ctx.drawImage(img, 0, 0, width, height);\n\n                        // Show resized image in preview element\n                        var dataurl = canvas.toDataURL(imageFile.type);\n                        document.getElementById(\"preview\").src = dataurl;\n                        console.log(dataurl);\n\n                        imgcnt++;\n                        files[\"image\" + imgcnt] = { url: imageFile.file, data: dataurl };\n                    }\n                    img.src = e.target.result;\n                }\n                reader.readAsDataURL(imageFile);\n            }\n        });\n    </script>\n",
        "output": "str",
        "x": 650,
        "y": 200,
        "wires": [
            [
                "c4031e46ec5a4ac5"
            ]
        ],
        "info": "https://formcarry.com/blog/how-to-upload-files-as-base64/"
    },
    {
        "id": "c4031e46ec5a4ac5",
        "type": "template",
        "z": "282ebcbcb21fbccd",
        "name": "Load",
        "field": "load",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n    <div>\n       <input hidden name=\"json-input\" type=\"file\" id=\"json-input\" accept=\"json/*\"> <br><br>\n        \n    </div>\n\n    <script>\n\n      \n        let jsonInput = document.getElementById('json-input');\n        jsonInput.addEventListener('change', function (e) {\n            if (e.target.files) {\n                let jsonFile = e.target.files[0];\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    console.log(reader.result);\n                    var jsonresults = JSON.parse(reader.result);\n                    if (jsonresults.qdata) {\n                        \n                        console.log(\"=================== Loading JSON\");\n\n                        document.getElementById(\"section1\").innerHTML = \"\";  \n\n                        console.log(jsonresults);\n                    \n                        qdata = jsonresults.qdata;\n                        console.log(\"=================== qdata\", qdata);\n\n                        calculated = jsonresults.calculated || {};\n\n                        files = jsonresults.files || {};\n\n                        testoSensorData = jsonresults.testodata || {}; \n\n                        runCalcs(); \n                        runCalcs();\n                        \n                    }\n                }\n                reader.readAsText(jsonFile);\n            }\n        });\n    </script>\n",
        "output": "str",
        "x": 790,
        "y": 200,
        "wires": [
            [
                "54a1cb571c819047"
            ]
        ],
        "info": "https://formcarry.com/blog/how-to-upload-files-as-base64/"
    },
    {
        "id": "54a1cb571c819047",
        "type": "template",
        "z": "282ebcbcb21fbccd",
        "name": "Form Generator",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "\n<script src=\"https://bossanova.uk/jspreadsheet/v4/jexcel.js\"></script>\n<link rel=\"stylesheet\" href=\"https://bossanova.uk/jspreadsheet/v4/jexcel.css\" type=\"text/css\" />\n \n<script src=\"https://jsuites.net/v4/jsuites.js\"></script>\n<link rel=\"stylesheet\" href=\"https://jsuites.net/v4/jsuites.css\" type=\"text/css\" />\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.1/jquery.validate.min.js\"></script>\n<!--https://www.sitepoint.com/basic-jquery-form-validation-tutorial/-->\n\n<script src=\"https://unpkg.com/mustache@latest\"></script>\n\n<script src=\"https://bossanova.uk/jspreadsheet/v4/jexcel.js\"></script>\n<link rel=\"stylesheet\" href=\"https://bossanova.uk/jspreadsheet/v4/jexcel.css\" type=\"text/css\" />\n \n<script src=\"https://jsuites.net/v4/jsuites.js\"></script>\n<link rel=\"stylesheet\" href=\"https://jsuites.net/v4/jsuites.css\" type=\"text/css\" />\n\n\n<script src=\"https://cdn.ckeditor.com/ckeditor5/34.0.0/inline/ckeditor.js\"></script>\n\n\n{{{mqtt}}}\n\n{{{pdf}}}\n\n<style>\n    \n@import url('https://fonts.googleapis.com/css2?family=Lato:wght@700&family=Roboto:wght@300&display=swap&family=Inter:wght@300;500;800&display=swap');\n\n    .jexcel_content {\n        font-size: 14px;\n    }\n    \n    .jexcel {\n        white-space: normal;\n    }\n\n/*for wiki*/\nli.gallerybox {\n    \n    display: inline-block;\n}\n\n.mybutt {\n    padding-left: 5px;\n    padding-right: 5px;\n    padding-top: 3px;\n    padding-bottom: 3px;\n    margin-right: 3px;\n    font-size: 14px;\n    border-radius: 4px;\n    cursor: pointer;\n    background-color: #a4eba4;\n    border-color: #4aa55a;\n    border: solid;\n    border-width: 1px;\n    box-shadow: 2px 2px 3px 1px rgb(0 0 0 / 28%);\n    display: inline-block;\n    margin: 3px;\n    transition: background 250ms ease-in-out, transform 150ms ease;\n}\n.mybutt:hover {\n  background-color: #dcffdc;\n}\n.section {\n    margin: auto;\n    min-height: 20px;\n    max-width: 1200px;\n    padding: 19px;\n    margin-bottom: 5px;\n    background-color: transparent;\n    border-radius: 4px;\n    font-family: 'Inter', sans-serif;\n}\n\n.question {\n    min-height: 20px;\n    padding: 19px;\n    margin-bottom: 2px;\n    background-color: transparent;\n    border-radius: 4px;\n}\n\ntextarea.form-control {\n    font-size: 0.9rem;\n}\n\n.outputbox {\n    margin: auto;\n    min-height: 20px;\n    max-width: 1500px;\n    padding: 19px;\n    margin-bottom: 20px;\n    background-color: #ffffff;\n    border: 1px solid #e3e3e3;\n    border-radius: 4px;\n    box-shadow: inset 0 1px 1px rgb(0 0 0 / 5%);\n    font-size: 16px;\n}\n\n.cframe {\n    border-radius: 0.25rem;\n    margin: 0px 0px 20px 0px;\n}\n\n.h1, h1 {\n    font-size: 30px;\n}\n\n.h2, h2 {\n    font-size: 24px;\n}\n.h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 {\n    margin-bottom: 20px;\n    font-weight: 500;\n    line-height: 1.2;\n    text-transform: uppercase;\n    font-weight: 800;\n}\n\n.small small {\n    font-weight: 300;\n}\n.qtext {\n    \n    padding: 6px 0px 4px;\n    font-size: 18px;\n    font-weight: 500;\n}\n.notes {\n    \n    padding: 5px 0px 0px;\n    font-size: .75em;\n    color: #57647E;\n    font-weight: 300;\n}\n.qunits {\n    \n    padding: 10px 10px 0px;\n    line-height: 2;\n}\n\n.video-wrapper {\n\tposition: relative;\n\tpadding-bottom: 56.25%; /* 16:9 */\n\tpadding-top: 15px;\n\theight: 0;\n\tmargin: 10px 0;\n}\n.video-wrapper iframe {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n}\n\nform .error {\n  color: #ff0000;\n  font-size: 16px;\n}\n\n::-webkit-input-placeholder { /* Edge */\n  color: yellow;\n}\n\n:-ms-input-placeholder { /* Internet Explorer 10-11 */\n  color: yellow;\n}\n\n::placeholder {\n  color: yellow;\n}\n\n.table td, .table th {\n    padding: 3px;\n}\n\n\n</style>\n<script type=\"text/javascript\">\n\nvar a = new Date(); \nvar timin = a.getTime();\n\nvar qdata;\nvar calculated = {};  calculated.objects = {};\nvar hasFocus;\nvar currentSection;\nvar selectSection;\nvar selectedSection = \"\";\nvar inputsOut;\nvar inputString;\nvar calcsString;\nvar tableArrays=[];\ntableArrays[\"calcsArray\"] = [];\n\nvar objects={}; \nvar sheets = {};\nvar sheetdata = {};\nvar initsheets;\n\nvar testoimage;\n\nvar validdata = {}\n\nvar ipfsCID = \"\";\nvar formID = \"\";\n\n\t$(document).ready(function(e) {\n    \n        // $(\"form[ajax=true]\").submit(function(e) {\n            \n        //     //alert(\"submit\");\n            \n        //     e.preventDefault();\n        \n            console.log(\"+++++++++++++++++START\");\n            calculated = {};\n            \n            //var urlParams = new URLSearchParams(window.location.search);\n            //if (urlParams.get('display')) { loadstring = \",,\" + urlParams.get('display'); }\n\n            calculated[\"jsonQ\"] = \"hndesign\";\n            \n            console.log(calculated);\n\n            var urlParams = window.location.search.replace(\"?\",\"\").split(\"&\");\n            for(var upa in urlParams) {\n                \n                var vin = decodeURIComponent(urlParams[upa].split(\"=\")[1]);\n                calculated[urlParams[upa].split(\"=\")[0]] = \"\"+vin;\n                \n                console.log(vin);\n                    \n                if(vin.indexOf(\"[\")>-1 || vin.indexOf(\"{\")==0) { \n                    \n                    try {\n                        console.log(\"+++++++++++++++++ ARRAY\");\n                        console.log(vin);\n                        console.log(JSON.parse(vin));\n                        calculated[urlParams[upa].split(\"=\")[0]] = JSON.parse(vin);\n                        \n                    } catch {}\n                    \n                }\n                \n            }\n            \n            // adding line below allows overwriting entries. Wish to force all updates as a new entry.\n            // if (calculated.submissionID) { submissionID = \"\"+calculated.submissionID; }\n\n            console.log(calculated);\n            \n            \n            //var form_url = \"/qdata/\" + calculated[\"jsonQ\"];\n            var form_url = \"/data/get-form-json?table=jsonforms&title=\" + calculated[\"jsonQ\"];\n            \n            \n            if (calculated[\"loadCID\"]) {\n                \n                form_url = \"https://heatweb.mypinata.cloud/ipfs/\" + calculated[\"loadCID\"];\n                document.getElementById(\"savesec\").style.display = \"block\";\n\n            } else if (calculated[\"id\"]) {\n            \n                form_url = \"/data/get-form-entries?id=\" + calculated[\"id\"];\n                formID = \"\" + calculated[\"id\"];\n            }\n            \n            var form_data = {};\n            var form_target = $(this).attr(\"target\") || \"result\";\n            var ftarget = \"#\" + form_target;\n            var form_method = \"GET\";\n            \n        //     $(\"#loadingimg\").show();\n            \n            $.ajax({\n                url: form_url, \n                type: form_method,      \n                data: form_data,     \n                cache: false,\n                success: function(results){   \n                    \n                    \n                    if (results.qdata) {\n                        \n                        console.log(\"=================== Loading IPFS\");\n                        console.log(results);\n                    \n                        qdata = results.qdata;\n                        console.log(\"=================== qdata\", qdata);\n\n                        calculated = results.calculated;\n\n                        files = results.files || files;\n\n                        testoSensorData = results.testodata || {}; \n                        \n                    } else if (results.data) {\n                    \n                        console.log(\"=================== Loading Form\");\n                        console.log(results);\n                        \n                        qdata = JSON.parse(results.data[0].json).qdata;\n                        console.log(\"=================== qdata\", qdata);\n                        \n                        calculated = JSON.parse(results.data[0].json).calculated;\n\n                        testoSensorData = JSON.parse(results.data[0].json).testodata || {};\n                    \n                    } else {\n                        \n                        qdata = results;\n                    }\n                    \n                    //qdata = JSON.parse(returnhtml);\n                    console.log(qdata);\n                   \n                    //if(urlParams['nBuildings']) { runCalcs(); runCalcs();  }\n                    runCalcs(); \n                    runCalcs();\n                    \n                    //var myTimeout = setTimeout(runCalcs(), 250);\n                    \n                    document.getElementById(\"formName\").innerHTML = qdata.title || \"Unamed Form\"; //JSON.stringify(qdata) ;\n                    \n                    // document.getElementById(\"section1\").innerHTML = parseQuestions(qdata); //JSON.stringify(qdata) ;\n                    \n                    for (var sht in initsheets) {  initSheet(initsheets[sht]);   }\n                    \n                    // validform();\n                                  \n                }           \n            });    \n            \n        // });\n        \n      \n        \n    });\n\n\n \n\n\n\n\nfunction initSheet(id) {\n\n    console.log(\"initSheet \" + id);\n    console.log(sheetdata);\n    \n    var shid = 'sheet-' + id;\n    var sdata = sheetdata[id];\n    \n    \n\n    try {\n    \n        document.getElementById(shid).innerHTML = \"\";\n        \n        sheets[id] = jspreadsheet(document.getElementById(shid), {\n            data: sdata.data,\n            columns: sdata.columns,\n            onchange: function(instance, cell, x, y, value) {\n                \n                console.log(value);\n                getSheetData(id);\n            },\n            updateTable:function(instance, cell, col, row, val, label, cellName) {\n               \n                //console.log(instance);\n                //console.log(val);\n                \n            },\n            columnSorting:false\n        });\n\n    } catch {}\n}\n\nfunction getSheetData(id) {\n    \n    \n    //alert(id);\n    \n    //console.log(sheets[id].getData());\n    \n    sheetdata[id].data = sheets[id].getData();\n    sheetdata[id].data = sheets[id].getJson();\n    \n    console.log(sheetdata);\n    \n    // var oots = \"\";\n    // for (var row in sheetdata[id].data) {\n    //   for (var c in sheetdata[id].data[row]) {\n           \n    //       var val = \"\" + (sheetdata[id].data[row][c] || \"\");\n    //       val = val.replace(/ /g,\"_\")\n    //       oots += val + \",\";\n    //     } \n    //     oots += \" \";\n    // }\n    \n    // oots = oots.substr(0, oots.length - 2);\n    // console.log(oots);\n    \n    // returncalc(id,oots)\n    \n    \n    returncalc(id,sheetdata[id].data);\n    \n}\n\n\nfunction getObject(id) {\n    \n  \n    return (objects[id]||null);\n    \n}\n\n\nfunction setObject(id,value) {\n    \n\n    try { objects[id] = value; }\n    catch {}\n\n    console.log(\"objects\",objects);\n}\n\t\nfunction returncalc(id,value) {\n    \n    //alert(id + \" = \" + value);\n    \n    \n    try { \n        \n        if (Array.isArray(value)) {\n            \n            document.getElementById(id).value = JSON.stringify(value);\n            \n        } else if (typeof value == \"object\") {\n            \n            document.getElementById(id).value = JSON.stringify(value);\n            \n        } else {\n            \n            document.getElementById(id).value = value; \n        };\n        \n    }\n    catch {}\n    \n    try { calculated[id] = value; }\n    catch {}\n    \n}\n\nfunction suggestcalc(id,value) {\n    \n    //alert(id + \" = \" + value);\n    \n    try { document.getElementById(id).placeholder = value + \" ... please confirm\"; }\n    catch {}\n}\n\nfunction useDefault(qid,s,q) {\n    \n    var def;\n    \n    if(Array.isArray(qdata.sections[s].questions[q].default)) { def = JSON.stringify(qdata.sections[s].questions[q].default); }\n    \n    else { def = \"\"+ qdata.sections[s].questions[q].default; }\n    \n    document.getElementById(qid).value = def;\n    \n    runCalcs();\n    \n}\n\n\nfunction useTesto(qid,testoRef) {\n    \n    testoData();\n    \n    var def;\n    def = \"\"+ testoD[testoRef].payload; \n    \n    document.getElementById(qid).value = def;\n    \n    //runCalcs();\n    \n}\n\nvar testoInterval;\n// testoInterval = setInterval(testoTimer, 1000);\n\nfunction testoTimer() {\n    var date = new Date();\n    testoData();\n}\n\nfunction testoStop() {\n    try { clearInterval(testoInterval); } catch {}\n}\n\n\nvar testoD={};\nvar testoButtons=\"\";\nvar testoSensorData = {}; \n\nfunction testoData() {\n\n    //alert(calculated.testoEnabled);\n    \n    // fetch data from Testo sensor App on same LAN\n    var ip = calculated.testoIpPort || \"localhost:54000\";\n\n    $.ajax({\n        url: \"http://\" + ip,\n        type: \"GET\",\n        data: {},\n        cache: false,\n        success: function(results){\n\n            var dp = {}; dp.count = 0;\n            var bits1 = results.split(\"<th>testo \");\n            for (var b1 in bits1) {\n\n                if (bits1[b1].indexOf(\"&nbsp;&nbsp;&nbsp;&nbsp;\")<0) { continue; }\n\n                var bits2 = bits1[b1].split(\"&nbsp;&nbsp;&nbsp;&nbsp;\")\n                var device = bits2[0] + \"-\" + bits2[1];\n\n                \n                if (!testoSensorData[device] ) { testoSensorData[device] = []; }\n                var tline = {timestamp:(new Date().getTime())}; \n                var changed = false;\n\n                var bits3 = bits1[b1].split(\"<tr>\");\n                \n                \n\n                for (var b3 in bits3) {\n\n                    if (bits3[b3].indexOf(\"°C\")<0 && bits3[b3].indexOf(\"bar\")<0) { continue; }\n\n                    var bits4 = bits3[b3].split(\"<td>\");     \n                    var varkey = bits4[1].split(\"<\")[0];\n                    var mytopic = device + \"/testo/\" + varkey;\n\n                    var msg1 = {};\n                    msg1.payload = bits4[2].split(\" \")[0];\n                    msg1.units = bits4[2].split(\"<\")[0].split(\" \")[1];        \n                    msg1.topic = \"testo/rhg-shed/\" + mytopic;\n                    msg1.device = device;\n                    //alert(device + \"   \" + msg1.payload + \" \" + msg1.units)\n                    calculated[device] = msg1.payload;\n\n                    if (testoD[device] && ((\"\"+msg1.payload) != (testoD[device].payload))) { \n                    \n                        changed = true; \n                        console.log(device + \" \" + varkey + \" \" + msg1.payload + \" \" + msg1.units); \n\n                        let tabs = document.getElementsByClassName(\"testobutton\"+device);\n                        for (var tab in tabs) {\n\n                            tabs[tab].style=\"background-color:#a4eba4\"; // #a4eba4  #ef626f\"\n                            tabs[tab].innerHTML = \"<small>\" + device + \"</small><br>\" + msg1.payload + \" \" + msg1.units;\n                        }\n                    \n                        if (mqttConnected) {\n                        \n                            message = new Paho.MQTT.Message(msg1.payload);\n                            message.destinationName = msg1.topic;\n                            client.send(message);     \n\n                            \n                        }\n\n                        if (chartExists==true) { updateGraph(); }\n\n\n                    }\n\n                    testoD[device] = msg1;\n\n                    tline[varkey] = parseFloat(msg1.payload);\n\n                   \n\n                    \n\n                    if (msg1.units ==\"bar\") { \n                        \n                        if(dp.count>0) { \n                            dp.two = parseFloat(msg1.payload); dp.count=2; \n                            var msgdp = {};\n                            msgdp.payload = Math.abs(dp.two - dp.one);\n                            msgdp.units = \"bar\";        \n                            msgdp.topic = \"testo/rhg-shed-pc-nr/testo/testo/dP\";\n                            msgdp.device = \"testo-dp\";\n                            calculated[\"testo-dp\"] = msgdp.payload;\n                            testoD[\"testo-dp\"] = msgdp;\n\n                            var msgkpa = {};\n                            msgkpa.payload = parseInt(1000 * Math.abs(dp.two - dp.one)) / 10;\n                            msgkpa.units = \"kPa\";\n                            msgkpa.topic = \"testo/rhg-shed-pc-nr/testo/testo/kPa\";\n                            msgkpa.device = \"testo-kPa\";\n                            calculated[\"testo-kPa\"] = msgkpa.payload;\n                            testoD[\"testo-kPa\"] = msgkpa;\n                            \n                        }\n                        else  { dp.one = parseFloat(msg1.payload); dp.count=1; }\n                    }\n\n                    //node.send(msg1);\n                }\n\n                \n                if (changed == true) { testoSensorData[device].push(tline); }\n\n            }\n\n        }\n    });\n\n\n}\n\nfunction gotoSection(sectoGo) {\n\n    if (sectoGo==\"Save to IPFS\") { runCalcs(); postIPFS(); }\n    else if (sectoGo==\"Download\") { runCalcs(); downJSON(); } \n    else if (sectoGo==\"Connect MQTT\" && mqttServer) { changeserver(); setTestoTimer(1); } \n    else if (sectoGo==\"PDF\") { runPDF(); }\n    else if (sectoGo==\"Load\") { document.getElementById(\"json-input\").click(); }\n    else if (sectoGo==\"Add Photo\") { document.getElementById(\"image-input\").click(); }\n    \n    else if (sectoGo==\"Graph Testo Data\") { if (chartExists==true) { updateGraph(); } else { drawGraph();} }\n    \n\n    else if (sectoGo==\"Next\") { runCalcs(); }\n    else {\n\n        console.log(\"======== Select Section ======\",sectoGo );\n\n        selectedSection = sectoGo;\n        runCalcs();\n        selectedSection = \"\";\n    }\n}\n\nvar testoPeriod = 0;\nfunction setTestoTimer(ttp) {\n\n    if (ttp==0) {\n        testoStop();\n        testoPeriod = 0;\n    }\n    else if (calculated.testoEnabled==\"true\" && testoPeriod==0) {\n        testoStop();\n        testoInterval = setInterval(testoTimer, ttp * 1000);\n        testoPeriod = ttp;\n    }\n}\n\nfunction parseQuestions(qdata) {\n    \n    console.log(qdata);\n    console.log(calculated);\n    \n    validdata = {\n        rules:{},\n        submitHandler: function(form) { runCalcs(); }\n    };\n\n    tableArrays[\"qArray\"] = [[\"Time\",\"Key\",\"Description\",\"Value\",\"Units\"]];\n    \n    var linkstxt=\"\";\n    if (qdata.links) {\n        for (var lnk in qdata.links) {\n            linkstxt += (linkstxt!==\"\"?\"<br>\":\"\") + '<a href=\"' + qdata.links[lnk].src + '\" target=\"_blank\">' + (qdata.links[lnk].title||qdata.links[lnk].src) + '</a>';\n        }\n        \n    }\n    document.getElementById(\"links\").innerHTML = linkstxt ; //JSON.stringify(qdata) ;\n    \n    \n    inputsOut = '<input id=\"jsonQ\" name=\"jsonQ\" value=\"' + calculated[\"jsonQ\"] + '\" class=\"form-control\" type=\"hidden\">';\n                    \n    \n    inputsOut += '<table class=\"table\">';\n    \n    inputString = \"jsonQ=\" + calculated[\"jsonQ\"];  // data source for form is fixed\n    \n    hasFocus = null;\n    currentSection = null;\n    selectSection = \"\";\n    initsheets = [];\n    var showcount = 0;\n    var buttcount = 0;\n    var outputscount = 0;\n    var sectionList = [];\n    \n    sectionList.push('Next');\n    sectionList.push('---');\n\n    var ootoot = \"\";\n    for (var s in qdata[\"sections\"]) {\n        console.log(s);\n        console.log(qdata.sections[s]);\n        \n        var oot = \"\";\n        var ootcount=0;\n        var qcount=0;\n\n        //oot += \"<div class='section'><h2>\" + qdata.sections[s].title + \"</h2>\\n\";\n        oot += \"<h2>\" + qdata.sections[s].title + \"</h2>\\n\";\n        \n        \n        \n        for (var q in qdata.sections[s].questions) {\n            \n            \n            var qif = qdata.sections[s].questions[q].if || true;\n            var qift = Mustache.render(qif, calculated);\n            \n            var goq = true;\n            try {\n              goq = looseJsonParse(qift); \n            }\n            catch(err) {\n              goq = false;\n            }\n            \n            var v=\"\";\n            if ((\"\"+calculated[qdata.sections[s].questions[q].id])!==\"\" && (\"\"+calculated[qdata.sections[s].questions[q].id])!==\"undefined\") { v= calculated[qdata.sections[s].questions[q].id] ; }\n            else if (qdata.sections[s].questions[q].value) { v= qdata.sections[s].questions[q].value ; }\n            \n            if (v!==\"\" && qdata.sections[s].questions[q].type != \"sheet\" && v!==qdata.sections[s].questions[q].value) { qdata.sections[s].questions[q].timestamp = new Date().getTime(); } // add timestamp on first answer.\n            \n\n            if (v!==\"\") { qdata.sections[s].questions[q].value = v; }    // save answers back into json.\n            \n            //if (v!==\"\" && !qdata.sections[s].questions[q].timestamp) { qdata.sections[s].questions[q].timestamp = new Date().getTime(); } // add timestamp on first answer.\n            \n            if(goq) {\n                \n                qcount++;\n\n                var calcfr = \"\";\n                if (qdata.sections[s].questions[q].calculator) { calcfr = '<iframe class=\"cframe\" frameBorder=\"0\" src=\"' +qdata.sections[s].questions[q].calculator + '?field=' + qdata.sections[s].questions[q].id + (calcsString||\"\") + '\" style=\"' + (qdata.sections[s].questions[q].calculatorStyle ? qdata.sections[s].questions[q].calculatorStyle:'width:100%; height:300px;') + '\"></iframe>'}\n            \n            \n                if (v!==\"\") { \n                    inputsOut += \"<tr>\";  \n                    \n                    var cOs1 = \"\";  var cOs2 = \"\";\n            \n                    if (document.getElementById(\"hideID\").checked!==true) {\n                        cOs2 = \" <small>[<i>\" + qdata.sections[s].questions[q].id + \"</i>]</small>\";  \n                    }\n                    \n                    inputsOut += '<td width=\"40%\">' + (qdata.sections[s].questions[q].title||qdata.sections[s].questions[q].id) + cOs2 + \"</td>\";\n                    \n                    var vs1=\"\"; var vs2=\"\";\n                    if((\"\"+v).indexOf(\",\") > -1) { vs1=\"<small>\"; vs2=\"</small>\"; }\n                    if((\"\"+v).indexOf(\"&\") > -1) { vs1=\"<small style='width:400px; word-wrap:break-word; display:inline-block;'>\"; vs2=\"</small>\"; }\n                    \n                    \n                    inputsOut +=  ('<td align=\"right\">' + vs1 + (typeof v ==\"object\"?\"{table}\":v) + vs2 + \"</td>\").replace(/\\, /g,\"<br>\").replace(/\\,/g,\", \");\n                    inputsOut +=  '<td width=\"14%\">' + (qdata.sections[s].questions[q].units||\"\") + \"</td></tr>\\n\";\n                    \n                    \n                    //if(Array.isArray(v)) {\n                    if(typeof v == \"object\") {\n                        \n                        inputString += (inputString!==\"\"?\"&\":\"\") + qdata.sections[s].questions[q].id + \"=\" + encodeURIComponent(JSON.stringify(v));\n                        \n                    } else {\n                        \n                        inputString += (inputString!==\"\"?\"&\":\"\") + qdata.sections[s].questions[q].id + \"=\" + encodeURIComponent(v);\n                    }\n                    \n                    \n                }\n            \n                var isDisplayed = false;\n            \n                if (selectedSection==\"\" && hasFocus && document.getElementById(\"oneQ\").checked==true) {  oot += '<div class=\"question\" style=\"display:none\">'; }\n            \n                else if (v!==\"\") { \n                    \n                    if (selectedSection==\"\" && document.getElementById(\"hideDone\").checked==true) {  oot += '<div class=\"question\" style=\"display:none\">';   }\n                    else {  oot += '<div class=\"question\" style=\"background-color: #f1fdf1;\">'; ootcount++; isDisplayed=true; }\n                    \n                } else { oot += '<div class=\"question\">'; ootcount++; isDisplayed=true; if (!hasFocus) { hasFocus = qdata.sections[s].questions[q].id;  currentSection = qdata.sections[s].title;  } }\n                \n\n                \n                \n                //oot += \"<div class='qtext'>\" + qdata.sections[s].questions[q].title + '</div>';\n                oot += '<label for=\"' + qdata.sections[s].questions[q].id + '\" class=\"qtext\">' + Mustache.render((qdata.sections[s].questions[q].question||qdata.sections[s].questions[q].title), calculated) + '</label>';\n                \n                if (calcfr!==\"\") { oot += \"\\n\" + calcfr + \"\\n\"; }\n                \n                 \n                if (qdata.sections[s].questions[q].type == \"sheet\") {\n                    \n                    oot += '<br><div id=\"sheet-' + qdata.sections[s].questions[q].id + '\">';\n                \n                    oot += '<span onclick=\"initSheet(' + \"'\" + qdata.sections[s].questions[q].id + \"'\"  + ')\"><small class=\"mybutt\">Load Sheet</small></span> ';\n                    \n                    oot += '</div>';\n                    \n                    //oot += '<script>initSheet(' + \"'\" + qdata.sections[s].questions[q].id + \"'\"  + ');</scrip' + 't> ';\n                    //var myTimeout = setTimeout(initSheet(qdata.sections[s].questions[q].id), 1000);\n                    if (isDisplayed) { initsheets.push(qdata.sections[s].questions[q].id); }\n                \n                    var shob = {};\n                    shob['columns'] = qdata.sections[s].questions[q].columns;\n                    shob['data'] = [[]];\n                    \n                    if(Array.isArray(v)) { shob['data']=v; }\n                    \n                    // else if((\"\"+v)!==\"\") {\n                        \n                    //     shob['data']=[];\n                    //     var vv = v.replace(/\\%20/g,\" \").replace(/_/g,\" \");\n                    //     var lns = vv.split(\", \");\n                    //     for (var lnsv in lns) {\n                    //         shob['data'].push(lns[lnsv].split(\",\"));\n                    //     }\n                    // }\n                    \n                    // else if (Array.isArray(qdata.sections[s].questions[q].default)) { \n                        \n                    //     shob['data']=qdata.sections[s].questions[q].default;\n                        \n                        \n                    // }\n                    \n                    else if (qdata.sections[s].questions[q].default) { \n                        \n                        shob['data']=qdata.sections[s].questions[q].default;\n                        \n                        oot += '<br><span onclick=\"useDefault(' + \"'\" + qdata.sections[s].questions[q].id + \"'\"  + ','+s+','+q+')\"><small class=\"mybutt\">Use Default Values</small></span> <br> <br> ';\n                        //oot += '<br><br>';\n                        \n                    \n                        \n                    }\n                   \n                    // replace calcs in sheet\n\n                    try {\n                        var shobtxt = JSON.stringify(shob);\n\n                        var shobtxt = Mustache.render(shobtxt, calculated);\n                        \n                        shob = JSON.parse(shobtxt);\n                    } catch {}\n\n                    sheetdata[qdata.sections[s].questions[q].id] = shob;\n                    \n                }\n                \n                \n                \n                if (qdata.sections[s].questions[q].type==\"html\") {\n                    \n                    oot += '<br><br><div class=\"form-control htmlinput\" style=\"height:fit-content\" name=\"' + qdata.sections[s].questions[q].id + '\" id=\"' + qdata.sections[s].questions[q].id + '\">';\n                    oot += decodeURIComponent('' + v + '')\n                    oot += '</div>';\n                \n                }\n                \n                \n                if (qdata.sections[s].questions[q].type !== \"sheet\") { oot += '<table width=\"100%\"><tr><td width=\"80%\">'; }\n                \n                if (qdata.sections[s].questions[q].type == \"sheet\") {\n                    \n                    \n                    oot += '<textarea class=\"form-control\" style=\"display:none\" name=\"' + qdata.sections[s].questions[q].id + '\" id=\"' + qdata.sections[s].questions[q].id + '\">';\n                    \n                    if((\"\"+v)!==\"\") {\n                    \n                        try { oot += JSON.stringify(v); }\n                        \n                        catch { oot += decodeURIComponent('' + v + ''); }\n                    \n                    }   \n                    oot += '</textarea>';\n                    \n                } \n                \n                 \n                else if (qdata.sections[s].questions[q].jsonQ) {\n                    \n                    \n                    oot += '<textarea class=\"form-control\" name=\"' + qdata.sections[s].questions[q].id + '\" id=\"' + qdata.sections[s].questions[q].id + '\">';\n                    //oot += ('' + v + '').replace(/\\%20/g,\" \").replace(/_/g,\" \");\n                    \n                    if (typeof v == \"object\") {\n                        \n                        try { oot += JSON.stringify(v); }\n                        catch { oot += decodeURIComponent('' + v + ''); }\n                        \n                    } else if ('' + v + '' !=='') {\n                        \n                        oot += decodeURIComponent('' + v + ''); \n                    }\n                    \n                    oot += '</textarea>';\n                    \n                } \n                \n                else if (qdata.sections[s].questions[q].type==\"html\") {\n                    \n                    oot += '';\n                    \n                   \n                \n                }\n                    \n                else if (qdata.sections[s].questions[q].type==\"boolean\") {\n                    \n                    oot += '<select class=\"form-control\" name=\"' + qdata.sections[s].questions[q].id + '\" id=\"' + qdata.sections[s].questions[q].id + '\">';\n                      if (v==\"true\") { oot += '<option value=\"false\">No</option><option value=\"true\" selected>Yes</option>'; }\n                      else if (v==\"false\")  { oot += '<option value=\"false\" selected>No</option><option value=\"true\">Yes</option>'; }\n                      else  { oot += '<option value=\"\"></option><option value=\"false\">No</option><option value=\"true\">Yes</option>'; }\n                    oot += '</select>';\n                    \n                } else if (qdata.sections[s].questions[q].options) {\n                    \n                    oot += '<select class=\"form-control\" name=\"' + qdata.sections[s].questions[q].id + '\" id=\"' + qdata.sections[s].questions[q].id + '\">';\n                    if (v==\"\") { oot += '<option value=\"\"></option>'; }\n                    \n                    \n                    if ((typeof qdata.sections[s].questions[q].options == \"string\") && qdata.sections[s].questions[q].options.substr(0,6)==\"lookup\") {\n                        \n                        \n                        var lookupOn = qdata.sections[s].questions[q].options.split(\"(\")[1].split(\")\")[0].split(\",\");\n                        if (lookupOn.length==3) {\n                            \n                            var lookupD = calculated[lookupOn[0].replace(/\\'/g,\"\").replace(/\\\"/g,\"\")];\n                            \n                            var srchk = lookupOn[2].replace(/\\'/g,\"\").replace(/\\\"/g,\"\");   // the key used as a value\n                            var srchtit = lookupOn[1].replace(/\\'/g,\"\").replace(/\\\"/g,\"\");  // the key used as an option title\n                            \n                            //var lookupO = [];\n                            for (var opt in lookupD) {\n                            \n                              var optobj = lookupD[opt];\n                              if (v==optobj[srchk]) { oot += '<option selected value=\"' + optobj[srchk] + '\">' + optobj[srchtit] + '</option>'; }\n                              else  { oot += '<option value=\"' + optobj[srchk] + '\">' + optobj[srchtit] + '</option>'; }\n                              \n                            }  \n                        }\n                    }\n                    else {\n                        for (var opt in qdata.sections[s].questions[q].options) {\n                        \n                          var optobj = qdata.sections[s].questions[q].options[opt];\n                          if (v==optobj.value) { oot += '<option selected value=\"' + optobj.value + '\">' + optobj.title + '</option>'; }\n                          else  { oot += '<option value=\"' + optobj.value + '\">' + optobj.title + '</option>'; }\n                          \n                        }  \n                    }\n                    oot += '</select>';\n                    \n                }  else {\n                \n                    oot += '<input id=\"' + qdata.sections[s].questions[q].id + '\" name=\"' + qdata.sections[s].questions[q].id + '\" class=\"form-control\"';\n                    if (qdata.sections[s].questions[q].type == \"number\") { oot += ' type=\"number\"'; }\n                    if (qdata.sections[s].questions[q].type == \"email\") { oot += ' type=\"email\"'; }\n                    else { oot += ' type=\"text\"'; }\n\n                    if (v!==\"\") { oot += (' value=\"' + decodeURIComponent(v) + '\"'); }\n                    if (qdata.sections[s].questions[q].default) { \n                        \n                        oot += ' placeholder=\"' + Mustache.render(\"\"+qdata.sections[s].questions[q].default, calculated)  + \" \" + (qdata.sections[s].questions[q].units||\"\") + ' ... please confirm\"'; \n                        \n                    }\n                    oot += '>';\n\n                    //testo\n                    if (calculated.testoEnabled==\"true\" && qdata.sections[s].questions[q].type == \"number\" && qdata.sections[s].questions[q].title.indexOf(\"Meter\")<0) {  \n                        \n                        var testoButts = \"\";\n                        for (var testoDev in testoD) {\n                            if (qdata.sections[s].questions[q].units == testoD[testoDev].units) {\n                                testoButts += '<span onclick=\"useTesto(' + \"'\" + qdata.sections[s].questions[q].id + \"','\"  + testoD[testoDev].device + \"'\" +')\"><b class=\"mybutt testobutton' + testoD[testoDev].device + '\">' + testoD[testoDev].device + '</b></span> '; // + \" \" + testoD[testoDev].payload + \" \" + testoD[testoDev].units\n                            }\n                        }\n                        if (testoButts != \"\") { oot += '<br>' + testoButts + '<br>'; }\n                    }\n                }\n                \n                if (qdata.sections[s].questions[q].type !== \"sheet\") { \n                    oot += '</td><td valign=\"top\"><span class=\"qunits\">' + (qdata.sections[s].questions[q].units||\"\") + '</span></td></tr></table>';\n                }\n                \n                if (qdata.sections[s].questions[q].notes) { oot += '<div class=\"notes\">' +\n                    convertLinks(Mustache.render(qdata.sections[s].questions[q].notes, calculated)) + '</div>'; }\n                \n                oot += '</div>\\n';\n                \n                if (typeof v !=\"object\") {\n                    var timest = \"\";\n                    if (qdata.sections[s].questions[q].timestamp) {\n                        //timest = qdata.sections[s].questions[q].timestamp;\n                        var date = new Date(qdata.sections[s].questions[q].timestamp);\n                        \n                        // Hours part from the timestamp\n                        var hours = date.getHours();\n                        \n                        // Minutes part from the timestamp\n                        var minutes = \"0\" + date.getMinutes();\n                        \n                        // Seconds part from the timestamp\n                        var seconds = \"0\" + date.getSeconds();\n                        \n                        // Will display time in 10:30:23 format\n                        timest = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n                    }\n\n                    tableArrays.qArray.push([timest||\"\", qdata.sections[s].questions[q].id, qdata.sections[s].questions[q].title||\"\".id,(\"\"+v).replace(/\\,/g,\", \"),qdata.sections[s].questions[q].units||\"\"]);\n                }\n                \n                validdata.rules[qdata.sections[s].questions[q].id] = {};\n                if (qdata.sections[s].questions[q].required) { validdata.rules[qdata.sections[s].questions[q].id].required = true; }\n\n            }\n        }\n    \n        oot += '<table width=\"100%\"><tr><td width=\"100%\" align=\"right\"><button class=\"mybutt\" type=\"submit\">Submit</button></td></tr></table>';\n\n        oot += \"</div>\\n\";\n       \n        \n        \n\n        var outhtml = \"\";   \n        for (var q in qdata.sections[s].outputs) {\n            \n            var qif = qdata.sections[s].outputs[q].if || true;\n            var qift = Mustache.render(qif, calculated);\n            \n            var goq = true;\n            try {\n            goq = looseJsonParse(qift); \n            }\n            catch(err) {\n            goq = false;\n            }\n            \n\n            if(goq && (calcsString||\"\")!==\"\") {\n                \n                var calcfr = \"\";\n                outputscount++;\n                //if (!objects[qdata.sections[s].outputs[q].id]) { objects[qdata.sections[s].outputs[q].id] = {}; }\n\n                // Only parse outputs when on selected page.\n                if (selectedSection==\"Outputs\") {\n\n                    if (qdata.sections[s].outputs[q].type==\"wiki\") { \n                        \n                        var oid = 'output'+qdata.sections[s].outputs[q].id;\n                        \n                        //qdata.sections[s].outputs[q].url\n                        //http://heatweb.co.uk/w/index.php?title=The_DATA_HIU#Description\n                        \n                        qdata.sections[s].outputs[q].url = qdata.sections[s].outputs[q].url.replace(\"http://heatweb.co.uk/w/index.php?title=\",\"\").replace(\"https://heatweb.co.uk/w/index.php?title=\",\"\")\n                        \n                        var tit = qdata.sections[s].outputs[q].url;\n                        if (tit.indexOf(\"#\")>-1) { tit = qdata.sections[s].outputs[q].url.split(\"#\")[0]; }\n                        \n                        var wikilocal = \"hnoutputs/wiki?id=\" + qdata.sections[s].outputs[q].id + \"&des=\" + qdata.sections[s].outputs[q].title.replace(/ /g,\"_\") + \"&title=\" + tit;\n                        if(qdata.sections[s].outputs[q].url.split(\"#\")[1]) { wikilocal += \"&section=\" + qdata.sections[s].outputs[q].url.split(\"#\")[1]; }\n                    \n                        \n                        outhtml += prepWebPage(qdata.sections[s].outputs[q],wikilocal);\n                        \n                        \n                        \n                    }\n                    else if (qdata.sections[s].outputs[q].type==\"heatwebcouk\") { \n                        \n                        var oid = 'output'+qdata.sections[s].outputs[q].id;\n                        \n                        //qdata.sections[s].outputs[q].url\n                        //https://www.heatweb.co.uk/district-heating-substations/heating-substations/\n                        \n                        //qdata.sections[s].outputs[q].url = qdata.sections[s].outputs[q].url.replace(\"https://www.heatweb.co.uk/w/index.php?title=\",\"\").replace(\"https://heatweb.co.uk/w/index.php?title=\",\"\")\n                        \n                        var sec = \"\";\n                        var tit = qdata.sections[s].outputs[q].url.replace(\"https://www.heatweb.co.uk/\",\"\").replace(\"https://heatweb.co.uk/\",\"\");\n                        if (tit.indexOf(\"/\")>-1) { tit = qdata.sections[s].outputs[q].url.split(\"/\")[0]; sec = qdata.sections[s].outputs[q].url.split(\"/\")[1]; }\n                        \n                        var wikilocal = \"hnoutputs/wiki?id=\" + qdata.sections[s].outputs[q].id + \"&des=\" + qdata.sections[s].outputs[q].title.replace(/ /g,\"_\") + \"&title=\" + tit;\n                        if(sec) { wikilocal += \"&section=\" + sec; }\n                    \n                        wikilocal += \"&type=\" + qdata.sections[s].outputs[q].type;\n                        wikilocal += \"&url=\" + encodeURIComponent(qdata.sections[s].outputs[q].url);\n                        outhtml += prepWebPage(qdata.sections[s].outputs[q],wikilocal);\n                        \n                        \n                        \n                    }\n                    else if (qdata.sections[s].outputs[q].url) { \n                        // \n                        calcfr = '<iframe id=\"opframe' + qdata.sections[s].outputs[q].id + '\" class=\"cframe\" frameBorder=\"0\" src=\"' + Mustache.render(\"\"+qdata.sections[s].outputs[q].url, calculated) + (qdata.sections[s].outputs[q].url.indexOf(\"?\")>0?'':'?') + (calcsString||\"\") + '\" style=\"' + (qdata.sections[s].outputs[q].style ? qdata.sections[s].outputs[q].style:'width:100%; height:300px;') + '\"></iframe>'\n                        \n                        outhtml += '<div class=\"outputbox\">';\n                        outhtml += \"<table width='100%'><tr><td><b>\" + qdata.sections[s].outputs[q].title + \"</b></td>\\n\";\n                        \n                        if (qdata.sections[s].outputs[q].buttons) { \n                            \n                            outhtml += '<td align=\"right\">';\n                            for (var btn in qdata.sections[s].outputs[q].buttons) {\n                                \n                                outhtml += '<span class=\"mybutt\" onclick=\"' + qdata.sections[s].outputs[q].buttons[btn].onClick + '\">' + qdata.sections[s].outputs[q].buttons[btn].text + '</span> ';\n                            }\n                            outhtml += '<span id=\"opopen' + qdata.sections[s].outputs[q].id + '\" class=\"mybutt\" onclick=\"opopen(' + \"'\" + qdata.sections[s].outputs[q].id + \"'\" + ')\">Open</span> ';\n                            \n                            outhtml += '</td>';\n                        }\n                        \n                        outhtml += '</tr></table><br>';\n                        \n                        outhtml += calcfr ; \n                        \n                        \n                        \n                        outhtml += \"</div>\\n\";\n                    }\n                }\n            \n            }\n        \n            \n            if (outhtml!==\"\") {\n                \n                //oot += '<div class=\"outputbox\">';\n                oot += outhtml;\n                //oot += \"</div>\\n\";\n            }\n            \n        }\n        \n        var isSecDisplayed = false;\n\n        if (selectedSection!==\"\" && (selectedSection == qdata.sections[s].title)) { ootoot += \"<div class='section'>\" + oot; showcount++; isSecDisplayed=true; }\n        \n        else if (selectedSection!==\"\") { ootoot += '<div class=\"section\" style=\"display:none\">' + oot; }\n\n        else if (document.getElementById(\"oneS\").checked==true && (currentSection != qdata.sections[s].title)) {  ootoot += '<div class=\"section\" style=\"display:none\">' + oot; }\n        \n        else if (ootcount>0) {  ootoot += \"<div class='section'>\" + oot;  showcount++; isSecDisplayed=true; }\n        \n        else {  ootoot += '<div class=\"section\" style=\"display:none\">' + oot; }\n\n        console.log(\"showcount\",showcount);\n\n        if (qcount>0) {\n\n            sectionList.push(qdata.sections[s].title);\n\n            buttcount++;\n            if (isSecDisplayed==true) { selectSection+='<span class=\"mybutt\" title=\"' + qdata.sections[s].title + '\" style=\"font-size: 11px; background-color: #beffbe;\"><b>' + qdata.sections[s].title + '</b></span>'; }\n            else { selectSection+='<span class=\"mybutt\" title=\"' + qdata.sections[s].title + '\" style=\"font-size: 11px;\" onclick=\"gotoSection(' + \"'\" + qdata.sections[s].title + \"'\" + ')\">' + buttcount + '</span>';  }\n        }\n    }\n    inputsOut +=  \"</table>\\n\";  \n    \n\n    if (showcount<1) {\n\n         if (formID==\"\" ) { postSQL(); formID==\"new\" ; } // MOVE TO SAVE selectedSection\n\n         document.getElementById(\"savesec\").style.display = \"block\";\n\n         setTestoTimer(0);\n\n    }\n\n    if (selectedSection==\"Calculations\" || (showcount<1 && selectedSection==\"\")) {  document.getElementById(\"calcsssec\").style=\"display:inline\" ;   } \n    else {  document.getElementById(\"calcsssec\").style=\"display:none\" ;  }\n\n    if (selectedSection==\"Inputs\" || (showcount<1 && selectedSection==\"\")) {  document.getElementById(\"inputssec\").style=\"display:inline\" ; } \n    else {  document.getElementById(\"inputssec\").style=\"display:none\" ;  }\n \n    if (buttcount>10) { selectSection+='<br>'; }\n\n    selectSection+='<span class=\"mybutt\" title=\"Inputs\" style=\"font-size: 11px;\" onclick=\"gotoSection(' + \"'Inputs'\" + ')\">Inputs</span>';\n    sectionList.push('---');\n    sectionList.push('Inputs');\n\n    selectSection+='<span class=\"mybutt\" title=\"Calculations\" style=\"font-size: 11px;\" onclick=\"gotoSection(' + \"'Calculations'\" + ')\">Calcs</span>';\n    sectionList.push('Calculations');\n    \n    if (outputscount>0) {\n        selectSection+='<span class=\"mybutt\" title=\"Outputs\" style=\"font-size: 11px;\" onclick=\"gotoSection(' + \"'Outputs'\" + ')\">Outputs</span>';\n        sectionList.push('Outputs');\n    }\n\n    sectionList.push('---');\n    sectionList.push('Connect MQTT');\n    sectionList.push('Graph Testo Data');\n    sectionList.push('---');\n    sectionList.push('Add Photo');\n    sectionList.push('---');\n    sectionList.push('Save to IPFS');\n    sectionList.push('Download');\n    sectionList.push('PDF');\n    sectionList.push('---');\n    sectionList.push('Load');\n\n    var dropSelect = '<select class=\"dropselect form-control\" name=\"dropselect\" id=\"dropselect\" onchange=\"gotoSection(this.value)\">'; //\n    // dropSelect += '<option value=\"\" selected>Go</option>';\n    for (var drs in sectionList) {\n        //dropSelect += '<option value=\"'+sectionList[drs]+'\">'+sectionList[drs]+'</option>';\n        if (sectionList[drs]==(selectedSection||currentSection)) { dropSelect += '<option value=\"'+sectionList[drs]+'\" selected>'+sectionList[drs]+'</option>'; }\n        else if (sectionList[drs].substring(0,3)==\"---\") { dropSelect += '<hr>'; }\n        else   { dropSelect += '<option value=\"'+sectionList[drs]+'\">'+sectionList[drs]+'</option>'; }\n    }                        \n    dropSelect += '</select>';\n\n    //document.getElementById(\"selSection\").innerHTML = selectSection ;\n    document.getElementById(\"selSection\").innerHTML = dropSelect ;\n    \n    return ootoot;\n}\n\nfunction prepWebPage(qd,url) {\n                    \n    var nn = \"\"+ qd.id;\n    var des = \"\" + qd.title;\n    if (qd[\"maxImageHeight\"]) { var maxImageHeight = qd[\"maxImageHeight\"]; }\n    \n    var outhtml='';\n    \n    $.ajax({\n        url: url, \n        type: \"GET\",      \n        data: {},     \n        cache: false,\n        success: function(results){   \n            \n            \n            var obid = results.split('obid=\"')[1].split('\"')[0];\n            var des = results.split('title=\"')[1].split('\"')[0];\n            \n            console.log('#'+obid);\n            console.log(results);\n            var opb = document.querySelector('#output'+obid);\n            opb.innerHTML = results || \"No Data\"; //JSON.stringify(qdata) ;\n            //document.getElementById(\"output\"+qd.id).innerHTML = results || \"No Data\"; //JSON.stringify(qdata) \n            \n            feImages(results);\n            \n            var myob = {};\n            myob.id = obid;\n            myob.filename = obid + \".html\";\n            myob.page = des;\n            myob.type = \"text/html\";\n            if (maxImageHeight) { myob[\"maxImageHeight\"]=maxImageHeight; }\n            myob.value = \"\" + results;\n            try { setObject(obid, myob); } catch {}\n            myob = null;\n            \n            \n            \n        }           \n    });    \n    \n    \n    //calcfr = '<iframe class=\"cframe\" frameBorder=\"0\" src=\"' +qd.url + (qd.url.indexOf(\"?\")>0?'':'?') + (calcsString||\"\") + '\" style=\"' + (qd.style ? qd.style:'width:100%; height:300px;') + '\"></iframe>'\n    var calcfr = '<div id=\"output'+qd.id + '\">waiting... ' + qd.id + '</div>'\n    \n    outhtml += '<div class=\"outputbox\">';\n    outhtml += \"<table width='100%'><tr><td><b>WIKI: \" + qd.title + \"</b></td>\\n\";\n    \n    if (qd.buttons) { \n        \n        outhtml += '<td align=\"right\">';\n        for (var btn in qd.buttons) {\n            \n            outhtml += '<span class=\"mybutt\" onclick=\"' + qd.buttons[btn].onClick + '\">' + qd.buttons[btn].text + '</span> ';\n        }\n        outhtml += '</td>';\n    }\n    \n    outhtml += '</tr></table><br>';\n    \n    outhtml += calcfr ; \n    \n    \n    \n    outhtml += \"</div>\\n\";\n    \n    return (outhtml);\n    \n}\n\n\n\t\nfunction vlookup (vlk)\t {\n    \n\n    //         \"vlookup\": [\n    //             \"propertyTypes\",\n    //             \"windowFactor\",\n    //             \"propertyType\",\n    //             \"propertyType\",\n    //             \"above\"\n   \n    \n    \n    var rtv = 0;\n    var lastv = -1;\n    var lastoo = -1;\n    \n    if (calculated[vlk[0]]) {\n        \n        var searchField = \"\"+vlk[2];\n        var ootField = \"\"+vlk[1];\n        ootField = Mustache.render(ootField, calculated);  // \n            \n        var rtvlist = calculated[vlk[0]];\n        \n        for(var rtvit in rtvlist) {\n            \n            \n            if (rtvlist[rtvit][searchField]==calculated[vlk[3]]) {\n                \n                return (rtvlist[rtvit][ootField]);\n            }\n            else if (lastv!==-1 && !isNaN(rtvlist[rtvit][searchField])) {  \n                \n                \n                if (lastv < calculated[vlk[3]] && parseFloat(rtvlist[rtvit][searchField]) > calculated[vlk[3]]) {\n                    \n                    var ootv;\n                    \n                    if (vlk[4]==\"above\" || vlk[4]==\"higher\") {\n                        \n                        ootv = (rtvlist[rtvit][ootField]);\n                        \n                    } else if (vlk[4]==\"below\" || vlk[4]==\"lower\") {\n                        \n                        //console.log(\"============== VLOOKUP BELOW\");\n                        ootv = (lastoo);\n                        \n                    } else{\n                    \n                        var ootr = parseFloat(rtvlist[rtvit][ootField]) - parseFloat(lastoo);\n                        \n                        ootv =  parseFloat(lastoo) + (ootr * (    (calculated[vlk[3]] - parseFloat(lastv) ) / (parseFloat(rtvlist[rtvit][searchField]) -  parseFloat(lastv) )  ) );\n                        \n                        console.log(\"vvvvvvvvvvvvvvvvvvvvvvvvv\");\n                        console.log(parseFloat(lastoo) + \" + (\" + ootr + \"* (    (\" + calculated[vlk[3]] + \" - \" + parseFloat(lastv) + \" ) / ( \" + parseFloat(rtvlist[rtvit][searchField]) + \" - \" +  parseFloat(lastv) + \" )  ) )\");\n                    \n                    }\n                    return (ootv);\n                }\n                \n            }\n            \n            lastv = rtvlist[rtvit][searchField];  //hold for interpolation\n            lastoo =  rtvlist[rtvit][ootField];\n        }\n    }\n    \n    return (rtv);\n}\n\n\nfunction looseJsonParse(obj) {\n    return Function('\"use strict\";return (' + obj + ')')();\n}\n// console.log(looseJsonParse(\n//   \"{a:(4-1), b:function(){}, c:new Date()}\"\n// ))\n\nfunction runCalcs() {\n\n\n    calcsString = \"\";\n    tableArrays.calcsArray = [[\"key\",\"Description\",\"Value\",\"Units\"]];\n    \n    // run through form inputs and store current values into calculated.\n    var cells =  document.getElementsByClassName(\"form-control\");\n\tvar i;\n\tfor (i = 0; i < cells.length; i++) {\n\t\n\t    \n\t    \n\t\n\t\tcalcsOut += cells[i].value + \"<br>\\n\";\n        \n        if (\"\" + cells[i].value !== \"\") { \n            \n            if (isNaN(cells[i].value)) { \n                \n                if ((cells[i].classList+\" \").indexOf(\"htmlinput\")>-1) {     // && cells[i].classList.indexOf(\"ck\")>-1\n                    \n                    calculated[cells[i].id] = cells[i].innerHTML;\n                }\n                else {\n                    \n                    calculated[cells[i].id] = (cells[i].value);\n                \n                    if ((calculated[cells[i].id]+\" \").substr(0,1)==\"{\" || (calculated[cells[i].id]+\" \").substr(0,1)==\"[\") {    // detect objects in textboxes\n                        \n                        console.log(\"***********************************\")\n                        console.log(calculated[cells[i].id]);\n                        \n                        try  { calculated[cells[i].id] = JSON.parse(calculated[cells[i].id]) } catch {  }\n                        \n                        console.log(calculated[cells[i].id]);\n                        \n                        \n                    }\n                \n                }\n               \n                \n            } else {\n                \n                calculated[cells[i].id] = parseFloat(cells[i].value);\n            }\n            \n            calcsString += \"&\" + cells[i].id + \"=\" + encodeURIComponent(cells[i].value);\n        }\n\t}\n\t\n    var calcsOut = '<table class=\"table\">';\n    \n    //calculated.objects = objects;\n    \n    // ================== Sheet Custom Calculations\n    \n    \n    if (calculated['loadSchedule']) {\n        \n        console.log(\"Load Schedule = \");\n        console.log(calculated['loadSchedule']);\n        \n        \n            \n            var cv1 = calculated['loadSchedule'];\n            var cv = 0;\n            var np = 0;\n            var kwCHMax = 0;\n            \n            //var ldata=[];\n            \n            if (Array.isArray(cv1)) { // should be\n            \n                for (var lnsv in cv1) {\n                        \n                    //ldata.push(lns[lnsv].split(\",\"));\n                    \n                    cv = cv + parseFloat(cv1[lnsv][\"qty\"])\n                    \n                    np = np + (parseFloat(cv1[lnsv][\"occupants\"]) * parseFloat(cv1[lnsv][\"qty\"]));\n                    \n                    kwCHMax = kwCHMax + (parseFloat(cv1[lnsv][\"kwCH\"]) * parseFloat(cv1[lnsv][\"qty\"]));\n                    \n                    \n                }\n            \n            \n            } else { // legacy \n                \n                if((\"\"+cv1)!==\"\") {\n                    \n                    var vv = (\"\"+cv1).replace(/\\%20/g,\" \").replace(/_/g,\" \");\n                    var lns = vv.split(\", \");\n                    for (var lnsv in lns) {\n                        \n                        //ldata.push(lns[lnsv].split(\",\"));\n                        \n                        cv = cv + parseFloat(lns[lnsv].split(\",\")[4])\n                        \n                        np = np + (parseFloat(lns[lnsv].split(\",\")[2]) * parseFloat(lns[lnsv].split(\",\")[4]));\n                        \n                        kwCHMax = kwCHMax + (parseFloat(lns[lnsv].split(\",\")[3]) * parseFloat(lns[lnsv].split(\",\")[4]));\n                        \n                        \n                    }\n                }\n                \n            }\n            \n            calcsOut += \"<tr>\";  \n            calcsOut += \"<td>Total Properties</td>\";\n            \n            if (document.getElementById(\"hideMaths\").checked!==true) {\n                calcsOut += \"<td><small></small></td>\";   //\"<br>\\n\";\n            }\n            calcsOut +=  '<td align=\"right\">' + cv + \"</td>\";\n            calcsOut +=  '<td width=\"14%\">properties</td></tr>\\n';\n            \n            calculated['nProperties'] = cv;\n            calcsString += \"&nProperties=\" + cv;\n            \n            \n            \n            calcsOut += \"<tr>\";  \n            calcsOut += \"<td>Total People</td>\";\n            \n            if (document.getElementById(\"hideMaths\").checked!==true) {\n                calcsOut += \"<td><small></small></td>\";   //\"<br>\\n\";\n            }\n            calcsOut +=  '<td align=\"right\">' + np + \"</td>\";\n            calcsOut +=  '<td width=\"14%\">people</td></tr>\\n';\n            \n            calculated['nPeople'] = np;\n            calcsString += \"&nPeople=\" + np;\n            \n            \n            calcsOut += \"<tr>\";  \n            calcsOut += \"<td>Total of central heating outputs</td>\";\n            \n            if (document.getElementById(\"hideMaths\").checked!==true) {\n                calcsOut += \"<td><small></small></td>\";   //\"<br>\\n\";\n            }\n            calcsOut +=  '<td align=\"right\">' + kwCHMax + \"</td>\";\n            calcsOut +=  '<td width=\"14%\">kW</td></tr>\\n';\n            \n            calculated['kwCHMax'] = kwCHMax;\n            calcsString += \"&kwCHMax=\" + kwCHMax;\n            \n        \n        \n    }\n    \n    \n    // ================================\n    \n    if (calculated.testoEnabled==\"true\") { testoData(); }\n    \n    for (var calc in (qdata[\"calculations\"]||[])) {\n        \n        console.log(calc);\n        console.log(qdata.calculations[calc]);\n        \n        var cif = qdata.calculations[calc].if || true;\n        var cift = Mustache.render(cif, calculated);\n        var goc = true;\n        try {\n          goc = looseJsonParse(cift); \n        }\n        catch(err) {\n          goc = false;\n        }\n        \n        if (goc) {\n            \n            \n            var cv,f,ft;\n            \n            if(qdata.calculations[calc].vlookup) {\n            \n                f=\"\";\n                ft=\"\";\n                cv = vlookup(qdata.calculations[calc].vlookup);\n                console.log(cv);\n            \n            } else {\n                \n            \n                f = qdata.calculations[calc].function;\n                ft = Mustache.render(f, calculated);\n                \n                cv = \"\";\n                try {\n                  cv = looseJsonParse(ft); //  looseJsonParse(\"{a:(4-1), b:function(){}, c:new Date()}\");\n                }\n                catch(err) {\n                  \n                }\n             \n            }\n            \n            if (!isNaN(cv)) { cv = parseInt(cv*1000)/1000; }\n            \n            calcsOut += \"<tr>\";  //<td>\" + qdata.calculations[calc].id + \"</td>\";\n            calcsOut += \"<td>\";\n            \n            var cOs1 = \"\";  var cOs2 = \"\";\n            \n            if (document.getElementById(\"hideID\").checked!==true) {\n                cOs2 = \" <small>[<i>\" + qdata.calculations[calc].id + \"</i>]</small>\";  \n            }\n            \n            calcsOut += cOs1 + (qdata.calculations[calc].title||qdata.calculations[calc].id) + cOs2 + \"</td>\";\n            \n            \n            \n            //calcsOut += f + \" = \";\n            if (document.getElementById(\"hideMaths\").checked!==true) {\n                calcsOut += \"<td><small>\" + ft.replace(/\\,/g,\", \") + \"</small></td>\";   //\"<br>\\n\";\n            }\n            \n        \n            \n            var cvstyled = \"\"+cv;\n            if (cv==\"PASS\") { cvstyled = '<b style=\"color: #158915;\">PASS</b>'}\n            else if (cv==\"FAIL\") { cvstyled = '<b style=\"color: #f00;\">FAIL</b>'}\n\n            calcsOut +=  '<td align=\"right\">' + cvstyled + \"</td>\";\n            \n            calcsOut +=  '<td width=\"14%\">' + (qdata.calculations[calc].units||\"\") + \"</td></tr>\\n\";\n            \n            calculated[qdata.calculations[calc].id] = cv;\n            calcsString += \"&\" + qdata.calculations[calc].id + \"=\" + cv;\n            \n            tableArrays.calcsArray.push([qdata.calculations[calc].id,qdata.calculations[calc].title||\"\".id,cv,qdata.calculations[calc].units||\"\"]);\n        }\n        \n    }\n    \n    calcsOut +=  \"</table>\\n\";\n    \n    // for (var calc in calculated) {\n        \n        \n    // }\n    \n    document.getElementById(\"calcs\").innerHTML = calcsOut; //JSON.stringify(qdata) ;\n    \n    // rebuild form\n    document.getElementById(\"section1\").innerHTML = parseQuestions(qdata); //JSON.stringify(qdata) ;\n    \n    document.getElementById(\"inputs\").innerHTML = inputsOut; //JSON.stringify(qdata) ;\n    \n    document.getElementById(\"mylink\").innerHTML = '<a href=\"hndesign?' + inputString + '\" target=\"_blank\">Open/share design...</a>'; //JSON.stringify(qdata) ;\n    \n    if(document.getElementById(\"description\")) {  // work in progress - need to link to all\n\n        //document.getElementById(\"description\").innerHTML = '<div style=\"border: 1px solid #e5e3e3; border-radius: 6px; height:200px;\">' + document.getElementById(\"description\").innerHTML + '</div>';\n\n        InlineEditor\n                .create( document.querySelector( '#description' ) )\n                .catch( error => {\n                    console.error( error );\n                } );\n        \n        \n        //for (var sht in initsheets) {  initSheet(initsheets[sht]);   }\n    }\n    \n    if(calculated[\"goSave\"]==\"xx\") {\n        \n        document.getElementById(\"savesec\").style.display = \"block\";\n        document.getElementById(\"ipfsinfo\").innerHTML = 'changes unsaved';\n        \n        document.getElementById(\"savesecmore\").style.display = \"none\";\n                    \n    }\n        \n    validform(validdata);\n                    \n}\n\n\nconst convertLinks = ( input ) => {\n\n  let text = input;\n  const linksFound = text.match( /(?:www|https?)[^\\s]+/g );\n  const aLink = [];\n\n  if ( linksFound != null ) {\n\n    for ( let i=0; i<linksFound.length; i++ ) {\n      let replace = linksFound[i];\n      if ( !( linksFound[i].match( /(http(s?)):\\/\\// ) ) ) { replace = 'http://' + linksFound[i] }\n      let linkText = replace.split( '/' )[2];\n      if ( linkText.substring( 0, 3 ) == 'www' ) { linkText = linkText.replace( 'www.', '' ) }\n      if ( linkText.match( /youtu/ ) ) {\n\n        let youtubeID = replace.split( '/' ).slice(-1)[0];\n        aLink.push( '<div class=\"video-wrapper\"><iframe src=\"https://www.youtube.com/embed/' + youtubeID + '\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>' )\n      }\n      else if ( linkText.match( /vimeo/ ) ) {\n        let vimeoID = replace.split( '/' ).slice(-1)[0];\n        aLink.push( '<div class=\"video-wrapper\"><iframe src=\"https://player.vimeo.com/video/' + vimeoID + '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>' )\n      }\n      else {\n        aLink.push( '<a href=\"' + replace + '\" target=\"_blank\">' + linkText + '</a>' );\n      }\n      text = text.split( linksFound[i] ).map(item => { return aLink[i].includes('iframe') ? item.trim() : item } ).join( aLink[i] );\n    }\n    return text;\n\n  }\n  else {\n    return input;\n  }\n}\n\n\n//var validdata = {};\n\nfunction validform(validdata) {\n    \n    if(hasFocus && document.getElementById(hasFocus)) {\n        document.getElementById(hasFocus).focus();\n        \n        initSheet(hasFocus);\n        \n    }\n    \n    \n    \n// Initialize form validation on the registration form.\n  // It has the name attribute \"registration\"\n  $(\"form[name='qform']\").validate(validdata);\n  \n  var xxvalid = {\n    // Specify validation rules\n    rules: {\n      // The key name on the left side is the name attribute\n      // of an input field. Validation rules are defined\n      // on the right side\n       nFloors: {\n         required: true,\n         digits: true,\n         min: 1\n       },\n      lastname: \"required\",\n      email: {\n        required: true,\n        // Specify that email should be validated\n        // by the built-in \"email\" rule\n        email: true\n      },\n      password: {\n        required: true,\n        minlength: 5\n      }\n    },\n    // Specify validation error messages\n    messages: {\n      nProperties: \"Please enter a number.\",\n      lastname: \"Please enter your lastname\",\n      password: {\n        required: \"Please provide a password\",\n        minlength: \"Your password must be at least 5 characters long\"\n      },\n      email: \"Please enter a valid email address\",\n      nFloors: \"Please enter a number greater than 0.\"\n      \n    },\n    // Make sure the form is submitted to the destination defined\n    // in the \"action\" attribute of the form when valid\n    submitHandler: function(form) {\n      //form.submit();\n      runCalcs();\n      //alert(\"hello\");\n    }\n  }\n\n  \n}\n\n\nfunction tosvg(obid) {\n\n    var nn = prompt(\"Fileame\", objects[obid].id || obid);\n    if (nn===null) { return(null); }\n    nn = nn || \"download.svg\";\n    if (nn.indexOf(\".svg\")<0) { nn=nn + \".svg\" ; } \n    download( objects[obid].value, nn, \"image/svg+xml\" );\n }\n\n\n</script>\n\n\n\n<div id=\"selSection\" style=\"float:right; text-align: right; \"></div>\n\n<div style=\"float:right; display:none;\">\n<input type=\"checkbox\" id=\"oneS\" name=\"oneS\" checked> <small>One section at a time</small><br>\n<input type=\"checkbox\" id=\"oneQ\" name=\"oneQ\"> <small>One question at a time</small><br>\n<input type=\"checkbox\" id=\"hideDone\" name=\"hideDone\"> <small>Hide completed questions</small><br>\n<input type=\"checkbox\" id=\"hideMaths\" name=\"hideMaths\" checked> <small>Hide maths equations</small><br>\n<input type=\"checkbox\" id=\"hideID\" name=\"hideID\" checked> <small>Hide IDs</small>\n</div>\n<div id=\"formName\" class=\"h1\"></div>\n\n<div class='section' style='display:none;'>\n    \n    <table width=\"100%\"><tr>\n    <td valign=\"top\" width=\"70%\">\n        \n        <a href=\"https://heatweb.co.uk/w/index.php?title=Heat_Network_Designer\" target=\"_blank\"><small>Wiki Help Page</small></a>\n    </td>\n    <td width=\"30%\">\n        \n    </td>\n    </tr></table>\n</div>\n\n<form action=\"\" name=\"qform\" id=\"qform\">\n\n\n\n<div id=\"section1\"></div>\n\n<script>\n\n\n    function opopen(secid) {\n        \n        //alert(window.location.href.split(\".svg\")[0]+\".svg&display=\"+displayed);\n        \n        var url = document.getElementById(\"opframe\"+secid).contentWindow.location.href;\n        \n        window.open(url);  //\n        \n         \n    \n    }\n\n   function download(content, fileName, contentType) {\n       \n       if(!contentType) contentType = 'application/octet-stream';\n\t\t  const a = document.createElement(\"a\");\n\t\t  const file = new Blob([content], { type: contentType });\n\t\t  a.href = URL.createObjectURL(file);\n\t\t  a.download = fileName;\n\t\t  a.click();\n\t}\n\n\n    function downJSON() {\n        \n        var jsonfilename = calculated.jsonQ + \"-\" + (new Date().getTime()) + \".json\";\n        if (calculated.siteRef) { jsonfilename = calculated.siteRef  + (calculated.address? \", \" + calculated.address:\"\") + \" \" + calculated.jsonQ + \"-\" + (new Date().getTime()) + \".json\"; }\n\n        var jsonData = { \"calculated\": calculated, \"qdata\": qdata, \"objects\": objects, \"files\": files, testodata: testoSensorData };\n        download(JSON.stringify(jsonData), jsonfilename, \"text/plain\");\n    }\n\n\tfunction onDownload(){\n\t    \n\t    var jsonData = { \"url\": (window.location.href.split(\"hndesign\")[0]+ 'hndesign?' + inputString),\"calculated\": calculated, \"qdata\": qdata, \"objects\": objects, \"files\": files };\n\t\tdownload(JSON.stringify(jsonData), \"hndesign.json\", \"text/plain\");\n\t}\n    \n\n\n    function ipfsmore(func){\n     \n        if (func == \"datalink\") {\n            \n            navigator.clipboard.writeText('https://heatweb.mypinata.cloud/ipfs/' + ipfsCID);  //\n            alert(\"IPFS Data Link Copied to Clipboard\");\n            \n            \n            \n        } else if (func == \"designlink\") {\n            \n            navigator.clipboard.writeText(window.location.href.split(\"?\")[0]+ '?loadCID=' + ipfsCID);  //\n            alert(\"IPFS Design Link Copied to Clipboard\");\n            \n            \n        }\n    }\n    \n\n\tfunction postIPFS(){\n\t    \n\t    document.getElementById(\"ipfsinfo\").innerHTML = \"saving... please wait\";\n\t    \n\t    //var jsonData = { \"calculated\": calculated, \"qdata\": qdata, \"objects\": objects, \"tableArrays\": tableArrays, \"files\": files };\n\t\tvar jsonData = { \"calculated\": calculated, \"qdata\": qdata, testodata: testoSensorData };\n\t\t\n\t\tjsonData = { \"json\": JSON.stringify(jsonData) };\n\t\t//var jsonData = {};\n\t\t\n        // https://hw7.ddns.net/ui/posttoipfs\n\t    $.ajax({\n                url: \"https://heatweb-api.flowforge.cloud/posttoipfs\", //\n                type: \"POST\",      \n                data: jsonData,     \n                cache: false,\n                success: function(results){   \n                    \n                    ipfsCID = results.IpfsHash;\n                    \n                    document.getElementById(\"ipfsinfo\").innerHTML = '<a href=\"https://heatweb.mypinata.cloud/ipfs/' + results.IpfsHash + '\" target=\"_new\">' +  results.IpfsHash + '</a>';\n                    \n                    document.getElementById(\"savesecmore\").style.display = \"inline\";\n                    \n                    //alert(results.IpfsHash);\n                    \n                                  \n                }           \n            });  \n\t    \n\t}\n    \n\n    var savedSQL = false;\n    var submissionID = \"\";\n\n\tfunction postSQL(){\n\t    \n        // comment aout to allow save as changes made\n        //if (savedSQL) { return null; }\n\n        if (submissionID==\"\") { submissionID = \"hwf\" + (new Date().getTime()); calculated.submissionID = \"\"+submissionID; }\n\t    \n\t    var jsonData = { \"calculated\": calculated, \"qdata\": qdata, \"submissionID\": submissionID, testodata: testoSensorData };\n\t\t\n\t\tjsonData = { \"json\": JSON.stringify(jsonData) }; // , \"outputjson\": JSON.stringify(objects)\n\t\t\n        \n\t    $.ajax({\n                url: \"hwforms\", //\n                type: \"POST\",      \n                data: jsonData,     \n                cache: false,\n                success: function(results){   \n                    \n                    \n                    savedSQL = true;\n                                  \n                }           \n            });  \n\t    \n\t}\n    \n   //\n    \n    function copyData(){\n\t    \n\t    var jsonData = calculated ;\n\t\tnavigator.clipboard.writeText(JSON.stringify(jsonData));\n\t\talert(\"Data Copied to Clipboard\");\n\t}\n    \n    \n    function copylink() {\n        \n        //alert(window.location.href.split(\".svg\")[0]+\".svg&display=\"+displayed);\n        \n        navigator.clipboard.writeText(window.location.href.split(\"?\")[0]+ '?' + inputString);  //\n        alert(\"Link Copied to Clipboard\");\n         \n    \n    }\n    \n    function openlink() {\n        \n        //alert(window.location.href.split(\".svg\")[0]+\".svg&display=\"+displayed);\n        \n        window.open(window.location.href.split(\"?\")[0] + '?' + inputString);  //\n        \n         \n    \n    }\n    \n    function shareTwitter() {       \n        \n        var text = \"My latest heat network design.\";\n        var url = window.location.href.split(\"hndesign\")[0]+ 'hndesign?' + inputString.replace(/ /g,\"%20\");\n        window.open('http://twitter.com/share?url='+encodeURIComponent(url)+'&text='+encodeURIComponent(text), '', 'left=0,top=0,width=550,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0');\n\n    } \n\n</script>\n<!-- style=\"display:none\" -->\n\n<div id=\"inputssec\" name=\"inputssec\"  class='section' style=\"display:none\" >\n    <h2>Inputs</h2>\n    <div id=\"inputs\" class=\"notes\"></div>\n</div>\n\n<div id=\"calcsssec\" name=\"calcsssec\" class='section' style=\"display:none\">\n    <h2>Numeric Values and Calculations</h2>\n    <div id=\"calcs\" class=\"notes\"></div>\n</div>\n\n<div class='section'  style=\"display:none\">\n    <h2>Links</h2>\n    <div id=\"mylink\" class=\"notes\"></div>\n    <div id=\"links\" class=\"notes\"></div>\n</div>\n\n</form>\n\n\n\n\n <form id=\"nextform\" name=\"nextform\" method=\"post\" action=\"/api/print\" ajax=\"true\" target=\"result1\">\n    <input type=\"hidden\" id=\"svgtext\" name=\"svgtext\" value=\"\">\n    <input type=\"hidden\" id=\"svgfile\" name=\"svgfile\" value=\"\">\n    <input type=\"hidden\" id=\"show\" name=\"show\" value=\"\">\n    </form>\n <iframe width=\"100%\" frameborder=\"0\" id=\"result1\" name=\"result1\" style=\"display:none\"></iframe>\n\n\n<div id=\"savesec\" class='section' style=\"display:none\">\n\n    <table width=\"100%\">\n        <tr>\n            <td align=\"right\">\n                \n                <span class=\"mybutt\" onclick=\"testoData()\" style=\"display:none\">Testo</span>\n\n                <span class=\"mybutt\" onclick=\"downJSON()\">Download</span>\n                <span class=\"mybutt\" onclick=\"postIPFS()\">Save to IPFS</span>\n                <span id=\"savesecmore\" style=\"display:none\">\n    <span class=\"mybutt\" onclick=\"ipfsmore('datalink')\">Copy Data Link</span>\n                <span class=\"mybutt\" onclick=\"ipfsmore('designlink')\">Copy Form Link</span>\n                </span>\n                <br><small><span id=\"ipfsinfo\"></span></small>\n\n            </td>\n        </tr>\n    </table>\n\n</div>\n\n{{{testograph}}}\n\n<br>\n\n{{{upload}}}\n\n<br>\n\n{{{load}}}\n\n<script>\n    \n\nvar filesLoaded = 0;\n\nvar files = {\n  img1: {\n    url: \"logo.png\"\n  }\n};\n\nvar fonts = {};\n\nvar fontsx = {\n  f1: {\n    url: \"https://hw7.ddns.net/fonts/Roboto-Regular.ttf\"\n  },\n  f2: {\n    url: \"https://hw7.ddns.net/fonts/Roboto-Bold.ttf\"\n  },\n  f3: {\n    url:\n      \"https://hw7.ddns.net/fonts/Roboto-Italic.ttf\"\n  },\n  f4: {\n    url:\n      \"https://hw7.ddns.net/fonts/Roboto-BoldItalic.ttf\"\n  }\n};\n\nvar doc;\n\n\nfunction loadedFile(xhr) {\n  for (var file in files) {\n    if (files[file].url === xhr.responseURL) {\n      files[file].data = xhr.response;\n    }\n  }\n  filesLoaded += 1;\n  \n  console.log(xhr);\n  \n  if (filesLoaded == Object.keys(files).length) {\n    // showPDF();\n  }\n}\n\n\n\nfor (var file in files) {\n  files[file].xhr = new XMLHttpRequest();\n  files[file].xhr.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      loadedFile(this);\n    }\n  };\n  files[file].xhr.responseType = \"arraybuffer\";\n  files[file].xhr.open(\"GET\", files[file].url);\n  files[file].xhr.send(null);\n}\n\nfor (var font in fonts) {\n  fonts[font].xhr = new XMLHttpRequest();\n  fonts[font].xhr.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      //loadedFile(this);\n      console.log(\"font...\");\n      console.log(fonts[font].xhr)\n    }\n  };\n  fonts[font].xhr.responseType = \"arraybuffer\";\n  fonts[font].xhr.open(\"GET\", fonts[font].url);\n  fonts[font].xhr.send(null);\n}\n\n\n\nfunction prepImage (imid, imurl) {\n    \n       files[imid] = {};\n       files[imid][\"url\"] = imurl;\n    \n    //for (var file in files) {\n      files[imid].xhr = new XMLHttpRequest();\n      files[imid].xhr.onreadystatechange = function() {\n        if (this.readyState == 4 && this.status == 200) {\n          loadedFile(this);\n          console.log(files);\n        }\n      };\n      files[imid].xhr.responseType = \"arraybuffer\";\n      files[imid].xhr.open(\"GET\", files[imid].url);\n      files[imid].xhr.send(null);\n    //}\n   \n}\n\nfunction feImages(htmlt) {\n    \n    var bits = htmlt.split('src=\"');\n    //var hoot = \"\";\n    \n    var ic=0;\n    for (var i in bits) {\n        \n        ic++;\n        \n        if (ic>1) {  \n            \n            try {\n            \n                var src = bits[i].split('\"')[0];\n                \n                // bits[i] = bits[i].substr(bits[i].indexOf('\"'));\n                \n                var fn = src.substr(src.lastIndexOf(\"/\")+1);\n                fn = fn.replace(/ /g,\"_\").replace(/\\./g,\"_\").toLowerCase();\n                \n                console.log(fn + \" ... \" + src);\n                \n        //        prepImage (fn, src);\n                \n                //src = \"/ui/w/images/\" + src;\n                \n                // bits[i] = 'src=\"' + src + bits[i]; \n                \n                \n            } catch {}\n            \n            \n        }\n        \n        \n        //hoot += bits[i];\n    }\n\n}\n\n\n var secscnt = 0;\n            \n\n\nconst ppp = document.createElement(\"a\");\ndocument.body.appendChild(ppp);\nppp.style = \"display: none\";\n\nlet blob;\n\nfunction downloadp() {\n  if (!blob) return;\n  var url = window.URL.createObjectURL(blob);\n  ppp.href = url;\n  ppp.download = 'test.pdf';\n  ppp.click();\n  window.URL.revokeObjectURL(url);\n}\n\n\n\n\n\n</script>\n\n\n",
        "output": "str",
        "x": 980,
        "y": 200,
        "wires": [
            [
                "ee50fe67065fcab3"
            ]
        ],
        "info": "https://bossanova.uk/jspreadsheet/v4/"
    },
    {
        "id": "ee50fe67065fcab3",
        "type": "template",
        "z": "282ebcbcb21fbccd",
        "name": "Headers",
        "field": "heads",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n    <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\">\n\n   \n    <script src=\"https://kit.fontawesome.com/c6b21b7a8f.js\" crossorigin=\"anonymous\"></script>\n\n \n    <title>Thermal Integration Heatweb Node</title>\n\n\n  <script src=\"https://code.jquery.com/jquery-3.5.1.js\"></script>\n  <script src=\"https://cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js\" type=\"text/javascript\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.10.22/css/jquery.dataTables.min.css\">\n\n\n  \n    <style>\n    \n    body, textarea, input, select {\n    font-size: 18px;\n    background: transparent;    \n    font-family: 'Inter', sans-serif;\n}\n\nsection  {\n    /*border-bottom: 1px solid rgb(255, 255, 255);*/\n    padding: 20px 50px;\n    /* height: 100vh; */\n    scroll-snap-align: start;\n    /* text-align: center; */\n    position: relative;\n    /*background: #ffffff;*/\n    font-size: 18px;\n    }\n\nsection .table {\n            font-size: 16px;\n        }\n\ntable.dataTable.compact tbody td {\n    \n    padding: 2px;\n}   \n\nsection .jstree-node {\n    font-size: 16px;\n}\n\n.nowrap {\n    white-space: nowrap;\n}\n\n\nsmall {\n  font-weight: 300;\n}\n\n\n@media (max-width: 1480px) {\n\n    section {\n        \n        padding: 20px 20px;\n        \n        }\n\n}\n\n@media (max-width:480px) {\n\n    section {\n        \n        padding: 10px 8px;\n        \n        }\n\n\n        .dropselect {\n            width:10%;\n            display:inline;\n            background-color:#a4eba4; \n            border: 1px solid #020202; \n            margin-right:5px;\n        }\n\n}\n\n    \n        .maxsiz {\n\n        width: 100%; \n        height: 100vh;\n\n        }\n\n        .maxsiz2 {\n\n        width: 100%; \n        height: calc(100vh - 70px);\n\n        }\n\n        .dot {\n            height: 13px;\n            width: 13px;\n            background-color: rgb(52, 58, 52);\n            border-radius: 20%;\n            border: 2px;\n            border-color: rgb(5, 5, 20);\n            display: inline-block;\n        }\n\n        .thindot {\n            height: 13px;\n            width: 6px;\n            background-color: rgb(52, 58, 52);\n            border-radius: 20%;\n            border: 2px;\n            border-color: rgb(5, 5, 20);\n            display: inline-block;\n        }\n\n        .dotspacer {\n            height: 13px;\n            width: 2px;\n            display: inline-block;\n        }\n\n        .navReadings  {\n            /* border-bottom: 1px solid rgb(32, 28, 28); */\n            padding: 20px 50px 0px 50px;\n            /* background: #6d6d70; */\n            font-size: 80%;   \n            /* font-weight: bold; */\n            text-align: left;\n            color: #212529;   \n        }\n\n        .navReadings a {\n            color: #212529;         \n        }\n\n        \n\n           \n    </style>\n    \n</head>\n",
        "output": "str",
        "x": 1140,
        "y": 200,
        "wires": [
            [
                "e396bb05dd55d4d0"
            ]
        ]
    },
    {
        "id": "e396bb05dd55d4d0",
        "type": "function",
        "z": "282ebcbcb21fbccd",
        "name": "",
        "func": "msg.payload = msg.heads + \"<body><section>\" +  msg.payload.body + \"</section></body></html>\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 200,
        "wires": [
            [
                "4c1fbac5de39c71c"
            ]
        ]
    },
    {
        "id": "4c1fbac5de39c71c",
        "type": "http response",
        "z": "282ebcbcb21fbccd",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 200,
        "wires": []
    }
]